/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Shapes;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;

/**
 *
 * @author 
 */
public class Mypanel extends javax.swing.JPanel implements DrawingEngine{
 private static ArrayList <Shape> shapes ;
 private Shape selectedShape ;
 private int  comboIndex = 0 ;
 private int caseCorner=-1;
 private int currentCorner;
 private boolean mouseReleased;
 private boolean isDraggable ;
    public int getComboIndex() {
        return comboIndex;
    }

    public void setComboIndex(int comboIndex) {
        this.comboIndex = comboIndex;
    }
 
    /**
     * Creates new form Mypanel
     */

    public Mypanel() {
        initComponents();
         shapes = new ArrayList<Shape>();
         
         ClickListener clickListener = new ClickListener () ;
         this.addMouseListener(clickListener);
         DragListener dragListener = new DragListener () ;
         this.addMouseMotionListener(dragListener);
    }
 @Override
    public void paintComponent (Graphics g)
    {
        super.paintComponent(g);
        for(Shape s : shapes )
        {
            s.draw(g);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private class ClickListener extends MouseAdapter{
      
            
        
            @Override
            public void mousePressed (MouseEvent evt)
    {   

            int i=0;
            int caseNum=0;
            if(selectedShape!=null)
           {                    
               if(checkIfSelected(evt.getPoint())) // htrg3 true lw ana msh3amel select 3la haga
               {
                 // System.out.println("shel dots");
                  mouseReleased=true;
                  isDraggable=false;//l2n mfesh Shape selected
                  ((Resize)selectedShape).deletedots(getGraphics()); // b8yr lonha l abyd
                  ((Resize)selectedShape).drawdots(getGraphics());
                  caseNum=1; // mshlazm str da kda kda el 2 for loop l tht msh hyd5ol 
                  
                   selectedShape=null;
                   repaint();     
               }    
               
               if (caseNum==0) // kda ana m5trtsh  hga fdya ana m5tar shape
               {
                Rectangle t[]=((Resize)selectedShape).getSmallRectangles();
               
                comboIndex = 0;
                   for(Shape s: shapes)
                  {
                        if (((Moveable)s).contain(evt.getPoint()))
                        {
                            if(selectedShape!=s)
                            {
                            ((Resize)selectedShape).deletedots(getGraphics()); // b8yr lonha l abyd
                            ((Resize)selectedShape).drawdots(getGraphics()); // 3lshan lw hselect shape tany ams7 
                                                                             // dots mn shape adeem
                            repaint();     
                           // System.out.println("shape");
                            ((Resize)s).setDots();
                            ((Resize)s).drawdots(getGraphics());
                            ((Moveable)s).setDraggingPoint(evt.getPoint());     
                           
                            selectedShape=s;
                            ((Resize)selectedShape).setDots(); 
                            ((Resize)selectedShape).deletedots(getGraphics()); 
                            ((Resize)selectedShape).drawdots(getGraphics());
                            caseNum=1;
                            isDraggable = true;
                            mouseReleased = false;
                             }
                            else
                            {
                             ((Moveable)s).setDraggingPoint(evt.getPoint());   // 3mlt select l nfs Shape 
                             // fh3mlo set b draging point l gdeda
                            ((Resize)selectedShape).setDots(); 
                            ((Resize)selectedShape).drawdots(getGraphics());   
                            comboIndex=i+1;
                            }

                        }
                        i++; // counter for combox
        
                        
                  }
                             
                if(caseNum==0)
                {
                for (int j =0;j<t.length;j++)
                 {
                     if(t[j].contain(evt.getPoint()))
                      {
                        caseNum=1;   
                        t[j].setDraggingPoint(evt.getPoint());
     
                        currentCorner=j;
                        caseCorner=1;
                        mouseReleased=false;
                        isDraggable=true;
                      }
                 }  }
                }

             
                 
          }
            else
              {   
                  comboIndex = 0 ;
                for (Shape s:shapes)
                {   
                    if (((Moveable)s).contain(evt.getPoint()))
                   {  
                       System.out.println("mkontsh 3amel select l wla shape w 3mlt");
                       selectedShape=s;
                       ((Resize)selectedShape).setDots();
                       ((Resize)selectedShape).drawdots(getGraphics());

                        ((Moveable)s).setDraggingPoint(evt.getPoint());     
                        comboIndex = i+1 ;
                        mouseReleased = false ;
                        isDraggable = true ;
                    }
                         i++;
                    
            
                }
              }
    }
        private boolean checkIfSelected(Point mousePoint)
      {
      Rectangle t[]=((Resize)selectedShape).getSmallRectangles();
       for(Rectangle rectangle:t)
       {
           if(rectangle.contain(mousePoint))
               return false;
       }
       for (Shape s: shapes)
       {
           if(((Moveable)s).contain(mousePoint))
           {
               return false;
           }
       }
       comboIndex = 0 ;
       return true; 
      }
            @Override
    public void mouseReleased ( MouseEvent evt)
    {
                   if(mouseReleased == true)
            {
                        
            caseCorner = 0;
           selectedShape = null;
            }
    }
        
    }
private class DragListener extends MouseMotionAdapter
{
    
    
    
    @Override
    public void mouseDragged (MouseEvent evt)
    {   
        
                     if(selectedShape!=null)
             {
                 System.out.println(caseCorner);
                 if (caseCorner == 1)
                 {
                      Rectangle t[]=((Resize)selectedShape).getSmallRectangles();

                      ((Resize)selectedShape).resizeShape(getGraphics(),currentCorner,evt.getPoint());  
                      repaint();
                      mouseReleased = true;
                 }
               else
                 {
             ((Moveable)selectedShape).moveTo(evt.getPoint());  
              ((Moveable) selectedShape).setDraggingPoint(evt.getPoint());
             repaint();
             mouseReleased = true;
                 }
             } 
        
        
      }
      
              
      }
    @Override
    public void addShape(Shape shape) {
      shapes.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
        shapes.remove(shape);
    }

    @Override
    public Shape[] getShapes() {
        Shape []  shape = shapes.toArray(Shape[]::new);
      return shape ;
    }
    
    @Override
    public void refresh(Graphics canvas) {
     repaint();
    }
 public ArrayList<Shape> getter()
 {
     return  shapes ;
 }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
